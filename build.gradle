/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    def springBootVersion = '2.4.0'
    def sonarqubeVersion = '3.0'
    def asciidoctorGradleVersion = '1.6.1'
    def artifactoryVersion = '4.18.0'
    def bintrayVersion = '1.8.5'
    def owaspDependencyCheckVersion = '6.0.3'
    def httpBuilderVersion = '0.7.2'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorGradleVersion")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:$artifactoryVersion")
        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayVersion")
        classpath("org.owasp:dependency-check-gradle:$owaspDependencyCheckVersion")
        classpath("org.codehaus.groovy.modules.http-builder:http-builder:$httpBuilderVersion")
    }

}

apply plugin: 'org.sonarqube'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'org.asciidoctor.convert'


group 'com.webauthn4j'
version "${webAuthn4JSpringSecurityVersion}"

def sampleAppProjects = subprojects.findAll { ["fido-server-conformance-test-app", "spa", "spa-angular-client", "mpa"].contains(it.name) }
def webAuthn4JSpringSecurityLibraryProjects = subprojects.findAll { it.name.startsWith('webauthn4j-spring-security') }
def allJavaProjects = new HashSet()
allJavaProjects.addAll(webAuthn4JSpringSecurityLibraryProjects);
allJavaProjects.addAll(sampleAppProjects);

configure(webAuthn4JSpringSecurityLibraryProjects) {
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: "maven-publish"
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "com.jfrog.artifactory"

    javadoc {
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    apply from: "$rootDir/helper.gradle";

    def githubUrl = "https://github.com/webauthn4j/webauthn4j-spring-security"

    publishing {
        publications {
            standard(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar

                // "Resolved versions" strategy is used to define dependency version because WebAuthn4J use dependencyManagement (BOM) feature
                // to define its dependency versions. Without "Resolved versions" strategy, version will not be exposed
                // to dependencies.dependency.version in POM file, and it cause warning in the library consumer environment.
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = project.name
//                    description = project.description //TODO: this doesn't work. to be fixed. https://github.com/gradle/gradle/issues/12259
                    url = githubUrl
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/license/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'ynojima'
                            name = 'Yoshikazu Nojima'
                            email = 'mail@ynojima.net'
                        }
                    }
                    scm {
                        url = githubUrl
                    }

                    resolveStrategy = DELEGATE_FIRST
                }
                pom.withXml { pom ->
                    pom.asNode().appendNode("description", project.description) // workaround for https://github.com/gradle/gradle/issues/12259
                }
            }
        }
    }

    def bintrayUser = getVariable('BINTRAY_USER', 'bintrayUser')
    def bintrayToken = getVariable('BINTRAY_TOKEN', 'bintrayToken')
    def artifactoryUser = getVariable('ARTIFACTORY_USER', 'artifactoryUser')
    def artifactoryPassword = getVariable('ARTIFACTORY_PASSWORD', 'artifactoryPassword')
    def mavenCentralUser = getVariable('MAVEN_CENTRAL_USER', 'mavenCentralUser')
    def mavenCentralPassword = getVariable('MAVEN_CENTRAL_PASSWORD', 'mavenCentralPassword')

    task bintrayGpgSign(){
        group = "publishing"
        doLast{
            signArtifactsOnBintray(bintrayUser, bintrayToken);
        }
    }

    task bintrayMavenCentralSync(){
        group = "publishing"
        doLast{
            syncMavenCentralToBintray(bintrayUser, bintrayToken);
        }
    }

    artifactory {
        contextUrl = 'http://oss.jfrog.org/artifactory/simple/'
        publish {
            repository {
                repoKey = 'oss-snapshot-local' // The Artifactory repository key to publish to
                username = artifactoryUser
                password = artifactoryPassword
            }
            defaults {
                publications('standard')
            }
        }
    }

    artifactoryPublish {
        skip = !"${webAuthn4JSpringSecurityVersion}".endsWith("-SNAPSHOT") // Publish only when it is SNAPSHOT release
    }

    bintray {
        user = bintrayUser
        key = bintrayToken
        configurations = ['archives']
        publish = true
        dryRun = !("${webAuthn4JSpringSecurityVersion}".endsWith(".RELEASE")) // Publish only when it is RELEASE release
        publications = ['standard']
        pkg {
            userOrg = "webauthn4j"
            repo = "webauthn4j"
            name = project.name
            desc = project.description
            licenses = ['Apache-2.0']
            vcsUrl = githubUrl
            version {
                name = "${webAuthn4JSpringSecurityVersion}"
                released = new Date()
                vcsTag = "${webAuthn4JSpringSecurityVersion}"
                gpg {
                    sign = true
                }
                //Optional configuration for Maven Central sync of the version
                mavenCentralSync {
                    user = mavenCentralUser
                    password = mavenCentralPassword
                }
            }
        }
    }
}

configure(sampleAppProjects) {
    apply plugin: 'java'
}

configure(allJavaProjects) {
    apply plugin: 'org.owasp.dependencycheck'

    sourceCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:deprecation"
        options.compilerArgs << "-Werror"
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.jfrog.org/artifactory/libs-snapshot" }
    }

    def webauthn4jVersion = '0.15.0-SNAPSHOT'
    def springSecurityVersion = '5.4.1'
    def springBootVersion = '2.3.1.RELEASE'
    def hibernateValidatorVersion = '6.1.6.Final'
    def thymeleafVersion = '3.0.4.RELEASE'
    def modelMapperVersion = '2.3.8'

    def bootstrapVersion = '4.5.3'
    def jqueryVersion = '3.5.1'
    def fontAwesomeVersion = '5.15.1'
    def webjarsLocatorVersion = '0.40'

    def log4jdbcVersion = '0.2.7'
    def dbunitVersion = '2.7.0'
    def springTestDbunitVersion = '1.3.0'
    def webDriverManagerVersion = '4.2.2'
    // To use WebAuthn WebDriver extension, alpha release is used here.
    // When stable version is released, and Spring Boot BOM includes it, this need to be removed.
    def seleniumVersion = '4.0.0-alpha-7'

    dependencies {
        // BOM
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation platform("org.springframework.security:spring-security-bom:${springSecurityVersion}")

        constraints {
            // Independent libraries
            implementation("com.webauthn4j:webauthn4j-util:$webauthn4jVersion")
            implementation("com.webauthn4j:webauthn4j-core:$webauthn4jVersion")
            implementation("com.webauthn4j:webauthn4j-metadata:$webauthn4jVersion")
            implementation("com.webauthn4j:webauthn4j-test:$webauthn4jVersion")

            // Independent libraries for Sample applications
            implementation("org.hibernate:hibernate-validator:$hibernateValidatorVersion")
            implementation("org.thymeleaf:thymeleaf-testing:$thymeleafVersion")
            implementation("org.modelmapper:modelmapper:$modelMapperVersion")
            implementation("org.lazyluke:log4jdbc-remix:$log4jdbcVersion")

            implementation("org.webjars:bootstrap:$bootstrapVersion")
            implementation("org.webjars:jquery:$jqueryVersion")
            implementation("org.webjars:font-awesome:$fontAwesomeVersion")
            implementation("org.webjars:webjars-locator:$webjarsLocatorVersion")

            implementation("org.dbunit:dbunit:$dbunitVersion")
            implementation("com.github.springtestdbunit:spring-test-dbunit:$springTestDbunitVersion")
            implementation("io.github.bonigarcia:webdrivermanager:$webDriverManagerVersion")
            implementation("org.seleniumhq.selenium:selenium-java:$seleniumVersion")
        }
    }

}

task updateVersionsInDocuments() {
    group = "documentation"
    String regex = "<webauthn4j-spring-security\\.version>.*</webauthn4j-spring-security\\.version>";
    String replacement = "<webauthn4j-spring-security\\.version>" + latestReleasedWebAuthn4JSpringSecurityVersion + "</webauthn4j-spring-security.version>";

    def files = [file('README.md'), file('docs/src/reference/asciidoc/en/introduction.adoc'), file('docs/src/reference/asciidoc/ja/introduction.adoc')]
    files.each { file ->
        String updated = file.getText('UTF-8').replaceFirst(regex, replacement)
        file.setText(updated, 'UTF-8')
    }
}

task generateReleaseNote(type: JavaExec) {
    group = "documentation"
    classpath = files('gradle/lib/github-release-notes-generator.jar')

    args(latestReleasedWebAuthn4JSpringSecurityVersion, file("build/release-note.md").absolutePath, "--spring.config.location=file:" + file("github-release-notes-generator.yml").absolutePath)

}

asciidoctorj {
    version = asciidoctorVersion
}

asciidoctor {
    sourceDir = file("docs/src/reference/asciidoc")
//  backends = ['docbook5']
    resources {
        from(sourceDir) {
            include '*/images/**'
        }
    }
    options eruby: 'erubis'

    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${webAuthn4JSpringSecurityVersion}"
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'webauthn4j-spring-security'
        property 'sonar.issue.ignore.multicriteria', 'e1,e2'
        property 'sonar.issue.ignore.multicriteria.e1.ruleKey', 'java:S110'
        property 'sonar.issue.ignore.multicriteria.e1.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e2.ruleKey', 'java:S1452'
        property 'sonar.issue.ignore.multicriteria.e2.resourceKey', '**/*.java'
    }
}
