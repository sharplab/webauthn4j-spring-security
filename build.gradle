/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    def springBootVersion = '2.3.0.RELEASE'
    def sonarqubeVersion = "2.8.0.1969"
    def asciidoctorGradleVersion="1.6.1"
    def artifactoryVersion="4.15.2"
    def bintrayVersion = "1.8.5"
    def owaspDependencyCheckVersion = "5.3.2.1"
    def httpBuilderVersion = "0.7.2"

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorGradleVersion")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:$artifactoryVersion")
        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayVersion")
        classpath("org.owasp:dependency-check-gradle:$owaspDependencyCheckVersion")
        classpath("org.codehaus.groovy.modules.http-builder:http-builder:$httpBuilderVersion")
    }

}

apply plugin: 'org.sonarqube'
apply plugin: 'org.asciidoctor.convert'


group 'com.webauthn4j'
version "${WebAuthn4JSpringSecurityVersion}"

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8

    tasks.withType(JavaCompile) {
        //options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
    }

    repositories {
        mavenCentral()
        maven { url "https://oss.jfrog.org/artifactory/libs-snapshot" }
    }

    def webauthn4jVersion = '0.11.1.RELEASE'
    def springSecurityVersion = '5.3.2.RELEASE'
    def springBootVersion = '2.3.0.RELEASE'
    def terasolunaVersion = '5.5.1.RELEASE'
    def thymeleafVersion = '3.0.4.RELEASE'
    def modelMapperVersion = '2.3.7'
    def log4jdbcVersion = '0.2.7'
    def dbunitVersion = '2.7.0'
    def springTestDbunitVersion = '1.3.0'
    def webDriverManagerVersion = '3.8.1'

    dependencies {
        // BOM
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation platform("org.springframework.security:spring-security-bom:${springSecurityVersion}")

        // Independent libraries
        implementation platform("com.webauthn4j:webauthn4j-util:$webauthn4jVersion")
        implementation platform("com.webauthn4j:webauthn4j-core:$webauthn4jVersion")
        implementation platform("com.webauthn4j:webauthn4j-metadata:$webauthn4jVersion")
        implementation platform("com.webauthn4j:webauthn4j-test:$webauthn4jVersion")

        // Independent libraries for Sample applications
        implementation platform("org.terasoluna.gfw:terasoluna-gfw-common:$terasolunaVersion")
        implementation platform("org.terasoluna.gfw:terasoluna-gfw-web:$terasolunaVersion")
        implementation platform("org.thymeleaf:thymeleaf-testing:$thymeleafVersion")
        implementation platform("org.modelmapper:modelmapper:$modelMapperVersion")
        implementation platform("org.lazyluke:log4jdbc-remix:$log4jdbcVersion")
        implementation platform("org.dbunit:dbunit:$dbunitVersion")
        implementation platform("com.github.springtestdbunit:spring-test-dbunit:$springTestDbunitVersion")
        implementation platform("io.github.bonigarcia:webdrivermanager:$webDriverManagerVersion")
    }

    javadoc {
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
    }
}


asciidoctorj {
    version = asciidoctorVersion
}

asciidoctor {
    sourceDir = file("docs/src/reference/asciidoc")
//  backends = ['docbook5']
    resources {
        from(sourceDir) {
            include '*/images/**'
        }
    }
    options eruby: 'erubis'

    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${WebAuthn4JSpringSecurityVersion}"
}
